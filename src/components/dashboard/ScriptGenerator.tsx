import React, { useState } from 'react';
import { BrainCircuit, Sparkles, Target, Lightbulb, ArrowRight, Rocket, Copy, RefreshCw, Type, X, Sliders, MessageSquare, ChevronRight, ChevronLeft, ChevronDown, Clock } from 'lucide-react';

export const ScriptGenerator = () => {
  const [selectedLength, setSelectedLength] = useState<string | null>(null);
  const [videoTitle, setVideoTitle] = useState('');
  const [generatedScript, setGeneratedScript] = useState<string>('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [customPrompt, setCustomPrompt] = useState('');
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);

  const videoLengths = [
    { id: 'short', name: 'Short', duration: '< 1 min' },
    { id: 'medium', name: 'Medium', duration: '5-10 min' },
    { id: 'long', name: 'Long', duration: '15-30 min' }
  ];

  const generateScript = async () => {
    if (!selectedLength || !videoTitle) return;
    
    setIsGenerating(true);
    setIsDrawerOpen(true);
    
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const script = `# ${videoTitle}\n\n## Video Overview\n- Duration: ${videoLengths.find(l => l.id === selectedLength)?.duration}\n${customPrompt ? `\nCustom Instructions:\n${customPrompt}\n` : ''}\n\n## Introduction\n[Engaging hook and introduction]\n\n## Main Content\n1. Key Point One\n2. Key Point Two\n3. Key Point Three\n\n## Conclusion\n[Call to action and summary]\n\nGenerated by TubeMind.ai ðŸš€`;

    setGeneratedScript(script);
    setIsGenerating(false);
  };

  return (
    <div className="p-4 sm:p-6 lg:p-8">
      <div className={`max-w-7xl mx-auto space-y-6 transition-all duration-300 ${isDrawerOpen ? 'lg:mr-[400px]' : ''}`}>
        {/* Header */}
        <div className="bg-black/30 backdrop-blur-sm border border-red-500/20 rounded-2xl p-6">
          <div className="flex items-center space-x-3 mb-4">
            <div className="p-2 bg-red-500/10 rounded-lg">
              <Type className="h-6 w-6 text-red-400" />
            </div>
            <h2 className="text-xl font-bold text-white">AI Script Generator</h2>
          </div>
          <p className="text-sm text-gray-400">
            Generate engaging video scripts powered by advanced AI. Customize length and add optional instructions for perfect content.
          </p>
        </div>

        {/* Main Form */}
        <div className="bg-black/30 backdrop-blur-sm border border-red-500/20 rounded-xl p-6 space-y-6">
          {/* Video Title */}
          <div>
            <label className="block text-sm font-medium text-white mb-2">Video Title</label>
            <input
              type="text"
              value={videoTitle}
              onChange={(e) => setVideoTitle(e.target.value)}
              placeholder="Enter your video title..."
              className="w-full bg-black/20 border border-red-500/20 rounded-lg p-3 text-white placeholder-gray-500 focus:outline-none focus:border-red-500/50 transition-all duration-300"
            />
          </div>

          {/* Video Length */}
          <div>
            <label className="block text-sm font-medium text-white mb-2">Video Length</label>
            <div className="grid grid-cols-3 gap-3">
              {videoLengths.map((length) => (
                <button
                  key={length.id}
                  onClick={() => setSelectedLength(length.id)}
                  className={`
                    p-3 rounded-lg border transition-all duration-300 text-center
                    ${selectedLength === length.id
                      ? 'bg-red-500/10 border-red-500/50 text-white'
                      : 'bg-black/20 border-red-500/20 text-gray-400 hover:border-red-500/30'
                    }
                  `}
                >
                  <div className="text-sm font-medium">{length.name}</div>
                  <div className="text-xs opacity-75">{length.duration}</div>
                </button>
              ))}
            </div>
          </div>

          {/* Advanced Options Toggle */}
          <button
            onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}
            className="flex items-center space-x-2 text-sm text-red-400 hover:text-red-300 transition-colors duration-300"
          >
            <Sliders className="h-4 w-4" />
            <span>Advanced Options</span>
            <ChevronDown className={`h-4 w-4 transition-transform duration-300 ${showAdvancedOptions ? 'rotate-180' : ''}`} />
          </button>

          {/* Advanced Options */}
          {showAdvancedOptions && (
            <div className="space-y-4 pt-2">
              {/* Custom Instructions */}
              <div>
                <label className="block text-sm font-medium text-white mb-2">Custom Instructions (Optional)</label>
                <textarea
                  value={customPrompt}
                  onChange={(e) => setCustomPrompt(e.target.value)}
                  placeholder="Add custom instructions for the AI..."
                  className="w-full bg-black/20 border border-red-500/20 rounded-lg p-3 text-white placeholder-gray-500 focus:outline-none focus:border-red-500/50 transition-all duration-300 min-h-[100px] resize-y"
                />
              </div>
            </div>
          )}

          {/* Generate Button */}
          <button
            onClick={generateScript}
            disabled={!selectedLength || !videoTitle || isGenerating}
            className={`
              w-full px-6 py-3 bg-gradient-to-r from-red-600 to-red-800 text-white rounded-xl
              hover:from-red-500 hover:to-red-700 transition-all duration-300
              shadow-lg shadow-red-900/30 flex items-center justify-center space-x-2
              disabled:opacity-50 disabled:cursor-not-allowed
            `}
          >
            {isGenerating ? (
              <>
                <RefreshCw className="h-5 w-5 animate-spin" />
                <span>Generating Script...</span>
              </>
            ) : (
              <>
                <Sparkles className="h-5 w-5" />
                <span>Generate Script</span>
              </>
            )}
          </button>
        </div>

        {/* Mobile Generated Script Section */}
        <div className="lg:hidden">
          {generatedScript && (
            <div className="bg-black/30 backdrop-blur-sm border border-red-500/20 rounded-xl p-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-white">Generated Script</h3>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => setIsEditing(!isEditing)}
                    className="p-2 text-red-400 hover:text-red-300 transition-colors duration-300"
                  >
                    <Type className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => navigator.clipboard.writeText(generatedScript)}
                    className="p-2 text-red-400 hover:text-red-300 transition-colors duration-300"
                  >
                    <Copy className="h-4 w-4" />
                  </button>
                </div>
              </div>
              <div className="bg-black/20 rounded-xl p-4">
                {isEditing ? (
                  <textarea
                    value={generatedScript}
                    onChange={(e) => setGeneratedScript(e.target.value)}
                    className="w-full h-[300px] bg-black/20 text-gray-300 text-sm font-mono p-4 rounded-xl focus:outline-none resize-none"
                  />
                ) : (
                  <pre className="whitespace-pre-wrap text-gray-300 text-sm font-mono overflow-x-auto">
                    {generatedScript}
                  </pre>
                )}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Desktop Generated Script Drawer */}
      <div 
        className={`
          fixed top-0 right-0 h-full w-[400px] bg-black/30 backdrop-blur-xl border-l border-red-500/20
          transform transition-transform duration-300 ease-in-out z-50
          ${isDrawerOpen ? 'translate-x-0' : 'translate-x-full'}
          hidden lg:block
        `}
      >
        <div className="h-full flex flex-col">
          <div className="flex items-center justify-between p-4 border-b border-red-500/20">
            <div className="flex items-center space-x-2">
              <Type className="h-5 w-5 text-red-400" />
              <h3 className="text-lg font-bold text-white">Generated Script</h3>
            </div>
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setIsEditing(!isEditing)}
                className="p-2 text-red-400 hover:text-red-300 transition-colors duration-300"
              >
                <Type className="h-4 w-4" />
              </button>
              <button
                onClick={() => navigator.clipboard.writeText(generatedScript)}
                className="p-2 text-red-400 hover:text-red-300 transition-colors duration-300"
              >
                <Copy className="h-4 w-4" />
              </button>
              <button
                onClick={() => setIsDrawerOpen(false)}
                className="p-2 text-red-400 hover:text-red-300 transition-colors duration-300"
              >
                <ChevronRight className="h-4 w-4" />
              </button>
            </div>
          </div>
          <div className="flex-1 overflow-y-auto p-4">
            {isEditing ? (
              <textarea
                value={generatedScript}
                onChange={(e) => setGeneratedScript(e.target.value)}
                className="w-full h-full bg-black/20 text-gray-300 text-sm font-mono p-4 rounded-xl focus:outline-none resize-none"
              />
            ) : (
              <pre className="whitespace-pre-wrap text-gray-300 text-sm font-mono">
                {generatedScript}
              </pre>
            )}
          </div>
        </div>
      </div>

      {/* Toggle Drawer Button (Desktop) */}
      {generatedScript && !isDrawerOpen && (
        <button
          onClick={() => setIsDrawerOpen(true)}
          className="fixed top-1/2 right-0 transform -translate-y-1/2 bg-red-500/10 text-red-400 p-2 rounded-l-lg hidden lg:block"
        >
          <ChevronLeft className="h-4 w-4" />
        </button>
      )}
    </div>
  );
};